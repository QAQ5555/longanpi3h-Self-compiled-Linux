name: Build LonganPi 3H with U-Boot and Kernel Caching

on:
  workflow_dispatch:

env:
  ARCH: arm64

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt update && \
          sudo apt install -y gcc-aarch64-linux-gnu qemu-user-static \
          make build-essential bison flex libncurses-dev libssl-dev bc \
          cpio rsync kmod u-boot-tools xz-utils f2fs-tools dosfstools \
          gdisk e2fsprogs debootstrap

      # 2. 克隆主线 U-Boot 源码
      - name: Clone U-Boot
        uses: actions/checkout@v3
        with:
          repository: u-boot/u-boot
          path: u-boot

      # 3. 配置 U-Boot
      - name: Configure U-Boot
        run: |
          cd u-boot
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- longanpi_3h_defconfig

      # 4. 编译 U-Boot
      - name: Build U-Boot
        run: |
          cd u-boot
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      # 5. 克隆主线 Linux 内核源码
      - name: Clone Linux kernel
        uses: actions/checkout@v3
        with:
          repository: torvalds/linux
          path: linux

      # 6. 恢复缓存（内核和模块）
      - name: Restore kernel and modules cache
        uses: actions/cache@v3
        with:
          path: |
            linux/arch/arm64/boot
            linux/output
          key: kernel-cache-${{ github.sha }}
          restore-keys: |
            kernel-cache-

      # 7. 配置内核
      - name: Configure kernel
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig
          echo "CONFIG_ARCH_SUNXI=y" >> .config
          echo "CONFIG_ARM64=y" >> .config
          echo "CONFIG_MMC=y" >> .config
          echo "CONFIG_F2FS_FS=y" >> .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

      # 8. 编译内核 Image 和设备树文件
      - name: Build kernel Image and DTBs
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) Image
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) dtbs

      # 9. 编译内核模块
      - name: Build kernel modules
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) modules
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install INSTALL_MOD_PATH=output

      # 10. 缓存内核和模块编译结果
      - name: Cache kernel and modules
        uses: actions/cache@v3
        with:
          path: |
            linux/arch/arm64/boot
            linux/output
          key: kernel-cache-${{ github.sha }}

      # 11. 上传内核和模块作为 Artifact（备用）
      - name: Upload kernel and modules
        uses: actions/upload-artifact@v3
        with:
          name: prebuilt-kernel-modules
          path: |
            linux/arch/arm64/boot/Image
            linux/arch/arm64/boot/dts
            linux/output

      # 12. 创建支持 F2FS 的启动镜像
      - name: Create F2FS bootable image
        run: |
          mkdir -p rootfs
          sudo debootstrap --arch=arm64 --variant=minbase jammy rootfs http://ports.ubuntu.com/
          sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
          sudo chroot rootfs /debootstrap/debootstrap --second-stage
          sudo chroot rootfs apt update
          sudo mkdir -p rootfs/boot
          sudo cp linux/arch/arm64/boot/Image rootfs/boot/
          sudo cp -r linux/arch/arm64/boot/dts rootfs/boot/
          sudo cp -r linux/output/lib rootfs/lib

          dd if=/dev/zero of=sdcard.img bs=1M count=4096
          parted -s sdcard.img mklabel gpt
          parted -s sdcard.img mkpart primary fat32 1MiB 128MiB
          parted -s sdcard.img mkpart primary f2fs 128MiB 100%
          sudo losetup -Pf sdcard.img
          dd if=u-boot/u-boot-sunxi-with-spl.bin of=/dev/loop0 bs=1k seek=8
          sudo mkfs.vfat /dev/loop0p1
          sudo mkfs.f2fs -f /dev/loop0p2
          mkdir -p boot root
          sudo mount /dev/loop0p1 boot
          sudo mount /dev/loop0p2 root
          sudo cp -r rootfs/* root/
          sudo umount boot root
          sudo losetup -d /dev/loop0

      # 13. 压缩镜像并生成校验文件
      - name: Compress and checksum
        run: |
          xz -z -v -9 -T$(nproc) sdcard.img
          sha512sum sdcard.img.xz > sdcard.img.xz.sha512

      # 14. 上传最终镜像
      - name: Upload final image
        uses: actions/upload-artifact@v3
        with:
          name: longanpi3h-image
          path: |
            sdcard.img.xz
            sdcard.img.xz.sha512
