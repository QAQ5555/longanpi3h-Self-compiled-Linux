name: Build LonganPi 3H Full Feature Image

on:
  workflow_dispatch:

env:
  ARCH: arm64

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1. 安装构建依赖
      - name: Install dependencies
        run: |
          sudo apt update && \
          sudo apt install -y gcc-aarch64-linux-gnu qemu-user-static \
          make build-essential bison flex libncurses-dev libssl-dev bc \
          cpio rsync kmod u-boot-tools xz-utils f2fs-tools dosfstools \
          gdisk e2fsprogs debootstrap mesa-utils mesa-vulkan-drivers

      # 2. 克隆主线 Linux 源码
      - name: Clone Linux kernel
        run: |
          git clone --depth 1 https://github.com/torvalds/linux.git

      # 3. 配置内核，添加所需特性支持
      - name: Configure kernel
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig
          # 启用 Allwinner H618 支持
          echo "CONFIG_ARCH_SUNXI=y" >> .config
          echo "CONFIG_MACH_SUN50I=y" >> .config
          echo "CONFIG_ARM64=y" >> .config
          # 启用 GPU Mali-G31 支持
          echo "CONFIG_DRM=y" >> .config
          echo "CONFIG_DRM_MALI_DISPLAY=y" >> .config
          echo "CONFIG_DRM_PANFROST=y" >> .config
          echo "CONFIG_MALI_GRALLOC=y" >> .config
          # 视频解码/编码
          echo "CONFIG_VIDEO_SUNXI_CEDAR=y" >> .config
          echo "CONFIG_MEDIA_SUPPORT=y" >> .config
          echo "CONFIG_V4L2_MEM2MEM_DEVICES=y" >> .config
          echo "CONFIG_VIDEO_H264=y" >> .config
          echo "CONFIG_VIDEO_H265=y" >> .config
          # RAM、存储、TF 卡、eMMC
          echo "CONFIG_MMC=y" >> .config
          echo "CONFIG_MMC_BLOCK=y" >> .config
          echo "CONFIG_MTD=y" >> .config
          # 以太网
          echo "CONFIG_ETHERNET=y" >> .config
          echo "CONFIG_NET_VENDOR_ALLWINNER=y" >> .config
          echo "CONFIG_DWMAC_SUN8I=y" >> .config
          # USB 支持
          echo "CONFIG_USB=y" >> .config
          echo "CONFIG_USB_XHCI_HCD=y" >> .config
          echo "CONFIG_USB_XHCI_PLATFORM=y" >> .config
          echo "CONFIG_USB_GADGET=y" >> .config
          echo "CONFIG_TYPEC=y" >> .config
          # GPIO 支持
          echo "CONFIG_GPIO_SYSFS=y" >> .config
          echo "CONFIG_SPI=y" >> .config
          echo "CONFIG_I2C=y" >> .config
          echo "CONFIG_SERIAL_DEV_BUS=y" >> .config
          # 常见模块支持
          echo "CONFIG_SND=y" >> .config
          echo "CONFIG_SND_SOC=y" >> .config
          echo "CONFIG_CRYPTO=y" >> .config
          echo "CONFIG_INPUT=y" >> .config
          echo "CONFIG_BLK_DEV_INITRD=y" >> .config
          echo "CONFIG_EXT4_FS=y" >> .config
          echo "CONFIG_F2FS_FS=y" >> .config
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

      # 4. 编译内核及模块
      - name: Build kernel and modules
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) Image
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) modules
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) dtbs
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) modules_install INSTALL_MOD_PATH=output

      # 5. 编译 U-Boot
      - name: Build U-Boot
        run: |
          git clone --depth 1 https://source.denx.de/u-boot/u-boot.git
          cd u-boot
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- sunxi_defconfig
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      # 6. 创建基于 Ubuntu 的根文件系统并配置
      - name: Create Ubuntu rootfs
        run: |
          mkdir -p rootfs
          sudo debootstrap --arch=arm64 --variant=minbase jammy rootfs http://ports.ubuntu.com/
          sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
          sudo chroot rootfs /debootstrap/debootstrap --second-stage
          sudo chroot rootfs apt update
          sudo chroot rootfs apt install -y ssh sudo net-tools ifupdown mesa-utils mesa-vulkan-drivers
          echo "root:root" | sudo chroot rootfs chpasswd
          echo "longanpi" | sudo tee rootfs/etc/hostname
          echo "auto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet dhcp" | sudo tee rootfs/etc/network/interfaces
          sudo chroot rootfs systemctl enable ssh

      # 7. 安装内核模块到根文件系统
      - name: Install kernel modules
        run: |
          sudo cp -r linux/output/lib rootfs/lib

      # 8. 配置根文件系统
      - name: Configure rootfs
        run: |
          sudo mkdir -p rootfs/boot/dtbs
          sudo cp linux/arch/arm64/boot/dts/allwinner/sun50i-h618-longan*.dtb rootfs/boot/dtbs/
          sudo cp linux/arch/arm64/boot/Image rootfs/boot/

      # 9. 创建支持 F2FS 的启动镜像
      - name: Create F2FS bootable image
        run: |
          dd if=/dev/zero of=sdcard.img bs=1M count=4096
          parted -s sdcard.img mklabel gpt
          parted -s sdcard.img mkpart primary fat32 1MiB 128MiB
          parted -s sdcard.img mkpart primary f2fs 128MiB 100%
          sudo losetup -Pf sdcard.img
          sudo mkfs.vfat /dev/loop0p1
          sudo mkfs.f2fs -f -o 1 -O compression -O extra_attr -O project_quota /dev/loop0p2
          mkdir -p boot root
          sudo mount /dev/loop0p1 boot
          sudo mount /dev/loop0p2 root
          sudo cp -r rootfs/* root/
          sudo umount boot root
          sudo losetup -d /dev/loop0

      # 10. 压缩镜像并生成校验文件
      - name: Compress and checksum
        run: |
          xz -z -v -9 -T$(nproc) sdcard.img
          sha512sum sdcard.img.xz > sdcard.img.xz.sha512

      # 11. 上传最终镜像
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 30
          name: longanpi3h-feature-image
          path: |
            sdcard.img.xz
            sdcard.img.xz.sha512
